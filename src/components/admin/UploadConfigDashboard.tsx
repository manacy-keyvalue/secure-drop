import { useState, useEffect } from "react";
import { Settings, Save, Plus, Trash2, BarChart3 } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";

interface UploadConfig {
  id: string;
  config_name: string;
  max_file_size: number;
  allowed_mime_types: string[];
  default_expiry_hours: number;
  require_watermark: boolean;
  auto_scan: boolean;
  max_files_per_user: number;
}

interface UploadStats {
  totalUploads: number;
  totalSize: number;
  successRate: number;
  recentUploads: any[];
}

export function UploadConfigDashboard() {
  const [configs, setConfigs] = useState<UploadConfig[]>([]);
  const [activeConfig, setActiveConfig] = useState<UploadConfig | null>(null);
  const [stats, setStats] = useState<UploadStats | null>(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const { toast } = useToast();

  useEffect(() => {
    loadConfigs();
    loadStats();
  }, []);

  const loadConfigs = async () => {
    try {
      const { data, error } = await supabase
        .from('upload_configs')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) throw error;
      setConfigs(data || []);
      if (data && data.length > 0) {
        setActiveConfig(data[0]);
      }
    } catch (error: any) {
      toast({
        title: "Error loading configs",
        description: error.message,
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const loadStats = async () => {
    try {
      // Get upload statistics
      const { data: uploads, error: uploadsError } = await supabase
        .from('file_uploads')
        .select('id, file_size, status, created_at')
        .order('created_at', { ascending: false })
        .limit(100);

      if (uploadsError) throw uploadsError;

      const totalUploads = uploads?.length || 0;
      const totalSize = uploads?.reduce((sum, upload) => sum + (upload.file_size || 0), 0) || 0;
      const successCount = uploads?.filter(upload => upload.status === 'approved' || upload.status === 'scanning').length || 0;
      const successRate = totalUploads > 0 ? (successCount / totalUploads) * 100 : 0;

      setStats({
        totalUploads,
        totalSize,
        successRate,
        recentUploads: uploads?.slice(0, 10) || [],
      });
    } catch (error: any) {
      console.error('Error loading stats:', error);
    }
  };

  const saveConfig = async () => {
    if (!activeConfig) return;

    setSaving(true);
    try {
      const { error } = await supabase
        .from('upload_configs')
        .upsert({
          id: activeConfig.id,
          config_name: activeConfig.config_name,
          max_file_size: activeConfig.max_file_size,
          allowed_mime_types: activeConfig.allowed_mime_types,
          default_expiry_hours: activeConfig.default_expiry_hours,
          require_watermark: activeConfig.require_watermark,
          auto_scan: activeConfig.auto_scan,
          max_files_per_user: activeConfig.max_files_per_user,
        });

      if (error) throw error;

      toast({
        title: "Configuration saved",
        description: "Upload configuration has been updated successfully.",
      });

      await loadConfigs();
    } catch (error: any) {
      toast({
        title: "Error saving config",
        description: error.message,
        variant: "destructive",
      });
    } finally {
      setSaving(false);
    }
  };

  const createNewConfig = () => {
    const newConfig: UploadConfig = {
      id: '', // Will be generated by database
      config_name: 'New Configuration',
      max_file_size: 10 * 1024 * 1024, // 10MB
      allowed_mime_types: ['image/*', 'application/pdf'],
      default_expiry_hours: 72,
      require_watermark: false,
      auto_scan: true,
      max_files_per_user: 100,
    };
    setActiveConfig(newConfig);
  };

  const deleteConfig = async (configId: string) => {
    try {
      const { error } = await supabase
        .from('upload_configs')
        .delete()
        .eq('id', configId);

      if (error) throw error;

      toast({
        title: "Configuration deleted",
        description: "Upload configuration has been removed.",
      });

      await loadConfigs();
    } catch (error: any) {
      toast({
        title: "Error deleting config",
        description: error.message,
        variant: "destructive",
      });
    }
  };

  const formatBytes = (bytes: number) => {
    if (bytes === 0) return '0 B';
    const k = 1024;
    const sizes = ['B', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const addMimeType = (mimeType: string) => {
    if (!activeConfig || !mimeType.trim()) return;
    
    const newTypes = [...activeConfig.allowed_mime_types, mimeType.trim()];
    setActiveConfig({
      ...activeConfig,
      allowed_mime_types: newTypes,
    });
  };

  const removeMimeType = (index: number) => {
    if (!activeConfig) return;
    
    const newTypes = activeConfig.allowed_mime_types.filter((_, i) => i !== index);
    setActiveConfig({
      ...activeConfig,
      allowed_mime_types: newTypes,
    });
  };

  if (loading) {
    return <div className="flex items-center justify-center h-64">Loading...</div>;
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold flex items-center gap-2">
            <Settings className="w-6 h-6" />
            Upload Configuration & Analytics
          </h2>
          <p className="text-muted-foreground">
            Manage file upload settings and view analytics
          </p>
        </div>
        <Button onClick={createNewConfig} className="flex items-center gap-2">
          <Plus className="w-4 h-4" />
          New Config
        </Button>
      </div>

      <Tabs defaultValue="configuration" className="space-y-4">
        <TabsList>
          <TabsTrigger value="configuration">Configuration</TabsTrigger>
          <TabsTrigger value="analytics">Analytics</TabsTrigger>
        </TabsList>

        <TabsContent value="configuration" className="space-y-6">
          <div className="grid md:grid-cols-3 gap-6">
            {/* Config List */}
            <Card>
              <CardHeader>
                <CardTitle>Configurations</CardTitle>
                <CardDescription>
                  Select a configuration to edit
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-2">
                  {configs.map((config) => (
                    <div
                      key={config.id}
                      className={`p-3 rounded-lg border cursor-pointer transition-colors ${
                        activeConfig?.id === config.id
                          ? 'border-primary bg-primary/10'
                          : 'border-border hover:bg-muted/50'
                      }`}
                      onClick={() => setActiveConfig(config)}
                    >
                      <div className="flex items-center justify-between">
                        <span className="font-medium">{config.config_name}</span>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={(e) => {
                            e.stopPropagation();
                            deleteConfig(config.id);
                          }}
                        >
                          <Trash2 className="w-4 h-4" />
                        </Button>
                      </div>
                      <p className="text-sm text-muted-foreground">
                        Max: {formatBytes(config.max_file_size)}
                      </p>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            {/* Config Editor */}
            <div className="md:col-span-2">
              {activeConfig && (
                <Card>
                  <CardHeader>
                    <CardTitle>Edit Configuration</CardTitle>
                    <CardDescription>
                      Modify upload rules and constraints
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-6">
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <Label htmlFor="config-name">Configuration Name</Label>
                        <Input
                          id="config-name"
                          value={activeConfig.config_name}
                          onChange={(e) =>
                            setActiveConfig({
                              ...activeConfig,
                              config_name: e.target.value,
                            })
                          }
                        />
                      </div>
                      <div>
                        <Label htmlFor="max-file-size">Max File Size (MB)</Label>
                        <Input
                          id="max-file-size"
                          type="number"
                          value={activeConfig.max_file_size / 1024 / 1024}
                          onChange={(e) =>
                            setActiveConfig({
                              ...activeConfig,
                              max_file_size: parseFloat(e.target.value) * 1024 * 1024,
                            })
                          }
                        />
                      </div>
                    </div>

                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <Label htmlFor="expiry-hours">Default Expiry (Hours)</Label>
                        <Input
                          id="expiry-hours"
                          type="number"
                          value={activeConfig.default_expiry_hours}
                          onChange={(e) =>
                            setActiveConfig({
                              ...activeConfig,
                              default_expiry_hours: parseInt(e.target.value),
                            })
                          }
                        />
                      </div>
                      <div>
                        <Label htmlFor="max-files">Max Files Per User</Label>
                        <Input
                          id="max-files"
                          type="number"
                          value={activeConfig.max_files_per_user}
                          onChange={(e) =>
                            setActiveConfig({
                              ...activeConfig,
                              max_files_per_user: parseInt(e.target.value),
                            })
                          }
                        />
                      </div>
                    </div>

                    <div>
                      <Label>Allowed MIME Types</Label>
                      <div className="flex flex-wrap gap-2 mt-2">
                        {activeConfig.allowed_mime_types.map((type, index) => (
                          <Badge
                            key={index}
                            variant="secondary"
                            className="cursor-pointer"
                            onClick={() => removeMimeType(index)}
                          >
                            {type} ×
                          </Badge>
                        ))}
                      </div>
                      <div className="flex gap-2 mt-2">
                        <Input
                          placeholder="Add MIME type (e.g., image/*, application/pdf)"
                          onKeyPress={(e) => {
                            if (e.key === 'Enter') {
                              addMimeType(e.currentTarget.value);
                              e.currentTarget.value = '';
                            }
                          }}
                        />
                        <Button
                          variant="outline"
                          onClick={(e) => {
                            const input = e.currentTarget.previousElementSibling as HTMLInputElement;
                            addMimeType(input.value);
                            input.value = '';
                          }}
                        >
                          Add
                        </Button>
                      </div>
                    </div>

                    <div className="space-y-4">
                      <div className="flex items-center justify-between">
                        <Label htmlFor="require-watermark">Require Watermark</Label>
                        <Switch
                          id="require-watermark"
                          checked={activeConfig.require_watermark}
                          onCheckedChange={(checked) =>
                            setActiveConfig({
                              ...activeConfig,
                              require_watermark: checked,
                            })
                          }
                        />
                      </div>
                      <div className="flex items-center justify-between">
                        <Label htmlFor="auto-scan">Auto Scan Files</Label>
                        <Switch
                          id="auto-scan"
                          checked={activeConfig.auto_scan}
                          onCheckedChange={(checked) =>
                            setActiveConfig({
                              ...activeConfig,
                              auto_scan: checked,
                            })
                          }
                        />
                      </div>
                    </div>

                    <Button
                      onClick={saveConfig}
                      disabled={saving}
                      className="w-full"
                    >
                      <Save className="w-4 h-4 mr-2" />
                      {saving ? 'Saving...' : 'Save Configuration'}
                    </Button>
                  </CardContent>
                </Card>
              )}
            </div>
          </div>
        </TabsContent>

        <TabsContent value="analytics" className="space-y-6">
          {stats && (
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Total Uploads</CardTitle>
                  <BarChart3 className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{stats.totalUploads}</div>
                  <p className="text-xs text-muted-foreground">
                    {formatBytes(stats.totalSize)} total size
                  </p>
                </CardContent>
              </Card>

              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Success Rate</CardTitle>
                  <BarChart3 className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{stats.successRate.toFixed(1)}%</div>
                  <p className="text-xs text-muted-foreground">
                    Upload success rate
                  </p>
                </CardContent>
              </Card>

              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Recent Activity</CardTitle>
                  <BarChart3 className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{stats.recentUploads.length}</div>
                  <p className="text-xs text-muted-foreground">
                    Last 24 hours
                  </p>
                </CardContent>
              </Card>
            </div>
          )}

          <Card>
            <CardHeader>
              <CardTitle>Recent Uploads</CardTitle>
              <CardDescription>
                Latest file upload activity
              </CardDescription>
            </CardHeader>
            <CardContent>
              {stats?.recentUploads && stats.recentUploads.length > 0 ? (
                <div className="space-y-2">
                  {stats.recentUploads.map((upload, index) => (
                    <div
                      key={upload.id}
                      className="flex items-center justify-between p-3 border rounded-lg"
                    >
                      <div>
                        <p className="font-medium">{upload.original_filename || 'Unknown'}</p>
                        <p className="text-sm text-muted-foreground">
                          {formatBytes(upload.file_size)} • {new Date(upload.created_at).toLocaleString()}
                        </p>
                      </div>
                      <Badge variant={upload.status === 'approved' ? 'default' : 'secondary'}>
                        {upload.status}
                      </Badge>
                    </div>
                  ))}
                </div>
              ) : (
                <p className="text-muted-foreground text-center py-8">
                  No recent uploads found
                </p>
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}